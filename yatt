#!/usr/bin/env bash
set -euo pipefail

YATT_DIR="$HOME/.yatt"
PROJECTS_DIR="$YATT_DIR/projects"

mkdir -p "$PROJECTS_DIR"

# -----------------------------
# Helper functions
# -----------------------------

json_file() {
    local project="$1"
    echo "$PROJECTS_DIR/$project.json"
}

project_exists() {
    [[ -f "$(json_file "$1")" ]]
}

load_project() {
    local project="$1"
    jq '.' "$(json_file "$project")"
}

save_project() {
    local project="$1"
    local tmp
    tmp=$(mktemp)
    jq '.' >"$tmp"
    mv "$tmp" "$(json_file "$project")"
}

# -----------------------------
# Commands
# -----------------------------

cmd_project_create() {
    local key="$1"
    local desc="${2:-}"

    if [[ "$key" == *"@"* ]]; then
        echo "Use 'yatt submodule create $key <desc>' to create submodules"
        exit 1
    fi

    if project_exists "$key"; then
        echo "Project '$key' already exists"
        exit 1
    fi

    jq -n \
      --arg key "$key" \
      --arg desc "$desc" \
      '{key: $key, description: $desc, tags: [], submodules: []}' \
      > "$(json_file "$key")"

    echo "âœ… Project '$key' created."
}

cmd_submodule_create() {
    local full="$1"
    local desc="${2:-}"

    if [[ "$full" != *@* ]]; then
        echo "Submodule name must be MODULE@PARENT"
        exit 1
    fi

    local module="${full%@*}"
    local parent="${full#*@}"

    if ! project_exists "$parent"; then
        echo "Parent project '$parent' does not exist"
        exit 1
    fi

    # check if module exists
    if jq -e --arg key "$module" '.submodules[] | select(.key==$key)' "$(json_file "$parent")" >/dev/null; then
        echo "Submodule '$module' already exists in '$parent'"
        exit 1
    fi

    # add submodule
    tmp=$(mktemp)
    jq --arg key "$module" --arg desc "$desc" \
       '.submodules += [{"key": $key, "description": $desc, "tags": []}]' \
       "$(json_file "$parent")" > "$tmp"
    mv "$tmp" "$(json_file "$parent")"

    echo "âœ… Submodule '$module@$parent' created."
}

cmd_project_list() {
    echo "ðŸ“‚ Projects:"
    for f in "$PROJECTS_DIR"/*.json; do
        [[ ! -f "$f" ]] && continue
        parent=$(jq -r '.key' "$f")
        echo "  - $parent"
        jq -r '.submodules[]?.key' "$f" | while read mod; do
            echo "      * $mod"
        done
    done
}

cmd_tags_add() {
    local full="$1"
    local tag="$2"

    if [[ "$full" == *@* ]]; then
        local module="${full%@*}"
        local parent="${full#*@}"
        [[ ! -f "$(json_file "$parent")" ]] && { echo "Parent project '$parent' not found"; exit 1; }

        # add tag to submodule
        tmp=$(mktemp)
        jq --arg mod "$module" --arg tag "$tag" '
            (.submodules[] | select(.key==$mod) | .tags) |= (if index($tag) then . else . + [$tag] end)
        ' "$(json_file "$parent")" > "$tmp"
        mv "$tmp" "$(json_file "$parent")"
        echo "âœ… Tag '$tag' added to submodule '$module@$parent'."

    else
        local project="$full"
        [[ ! -f "$(json_file "$project")" ]] && { echo "Project '$project' not found"; exit 1; }

        tmp=$(mktemp)
        jq --arg tag "$tag" '
            (.tags) |= (if index($tag) then . else . + [$tag] end)
        ' "$(json_file "$project")" > "$tmp"
        mv "$tmp" "$(json_file "$project")"
        echo "âœ… Tag '$tag' added to project '$project'."
    fi
}

cmd_tags_list() {
    local full="$1"

    if [[ "$full" == *@* ]]; then
        local module="${full%@*}"
        local parent="${full#*@}"
        jq -r --arg mod "$module" '.submodules[] | select(.key==$mod) | .tags[]' "$(json_file "$parent")"

    else
        jq -r '.tags[]' "$(json_file "$full")"
    fi
}

cmd_tags_by() {
    local tag="$1"
    echo "Projects/submodules with tag '$tag':"
    for f in "$PROJECTS_DIR"/*.json; do
        [[ ! -f "$f" ]] && continue
        proj=$(jq -r '.key' "$f")
        # check project
        if jq -e --arg t "$tag" '.tags | index($t)' "$f" >/dev/null; then
            echo "  - $proj"
        fi
        # check submodules
        jq -r --arg t "$tag" --arg parent "$proj" '.submodules[] | select(.tags|index($t)) | "\(.key)@'"$proj"'"' "$f" | while read sm; do
            echo "      * $sm"
        done
    done
}

# -----------------------------
# Main
# -----------------------------

if [[ $# -lt 1 ]]; then
    echo "Usage: $0 <command> ..."
    exit 1
fi

case "$1" in
    project)
        shift
        case "$1" in
            create) shift; cmd_project_create "$@" ;;
            list) shift; cmd_project_list ;;
            tags)
                shift
                case "$1" in
                    add) shift; cmd_tags_add "$@" ;;
                    list) shift; cmd_tags_list "$@" ;;
                    by) shift; cmd_tags_by "$@" ;;
                    *) echo "Unknown tags command"; exit 1 ;;
                esac ;;
            *) echo "Unknown project command"; exit 1 ;;
        esac ;;
    submodule)
        shift
        case "$1" in
            create) shift; cmd_submodule_create "$@" ;;
            *) echo "Unknown submodule command"; exit 1 ;;
        esac ;;
    *)
        echo "Unknown command"
        exit 1
        ;;
esac
