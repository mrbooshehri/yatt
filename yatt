#!/usr/bin/env bash
# YATT - Yet Another Time Tracker
# Pure bash implementation for projects, submodules, and tags

set -euo pipefail

YATT_DIR="$HOME/.yatt"
PROJECTS_DIR="$YATT_DIR/projects"

mkdir -p "$PROJECTS_DIR"

# -----------------------
# Helper functions
# -----------------------

show_help() {
    cat <<EOF
ðŸ•’ YATT (Yet Another Time Tracker) - Help

Usage: $0 <command> [arguments] [options]

Commands:

Project Management:
  project create <KEY> "<DESCRIPTION>"          Create a new project
  project list                                  List all projects and submodules
  project tags add <PROJECT|SUBMODULE> <TAG>   Add a tag to a project or submodule
  project tags list <PROJECT|SUBMODULE>        List tags for a project or submodule
  project tags by <TAG>                        List all projects/submodules with a tag

Submodule Management:
  submodule create <KEY>@<PROJECT> "<DESC>"   Create a submodule under a project

Other:
  help                                         Show this help
  version                                      Show YATT version

Examples:
  $0 project create make-coffee "Coffee project"
  $0 submodule create grind-beans@make-coffee "Grinding module"
  $0 project tags add make-coffee morning
  $0 project tags by morning
EOF
}

# JSON helpers
json_write() {
    local file="$1"
    local content="$2"
    echo "$content" > "$file"
}

json_read() {
    local file="$1"
    cat "$file"
}

json_escape() {
    printf '%s' "$1" | sed 's/"/\\"/g'
}

# -----------------------
# Project functions
# -----------------------

project_create() {
    local key="$1"
    local desc="$2"
    local file="$PROJECTS_DIR/$key.json"

    if [[ -f "$file" ]]; then
        echo "Project '$key' already exists"
        exit 1
    fi

    local json="{\"description\": \"$(json_escape "$desc")\", \"modules\": [], \"tags\": []}"
    json_write "$file" "$json"
    echo "âœ… Project '$key' created."
}

submodule_create() {
    local key_at_parent="$1"
    local desc="$2"

    if [[ "$key_at_parent" != *@* ]]; then
        echo "Submodule key must be in format <KEY>@<PROJECT>"
        exit 1
    fi

    local module="${key_at_parent%@*}"
    local parent="${key_at_parent#*@}"
    local parent_file="$PROJECTS_DIR/$parent.json"

    if [[ ! -f "$parent_file" ]]; then
        echo "Parent project '$parent' does not exist"
        exit 1
    fi

    # Read parent JSON
    local parent_json
    parent_json=$(json_read "$parent_file")

    # Add module
    if echo "$parent_json" | grep -q "\"$module\""; then
        echo "Submodule '$module' already exists in '$parent'"
        exit 1
    fi

    # Update JSON with module
    local new_modules
    new_modules=$(echo "$parent_json" | sed -E "s/\"modules\": \[\]/\"modules\": [\"$module\"]/")

    json_write "$parent_file" "$new_modules"
    echo "âœ… Submodule '$module@$parent' created."
}

project_list() {
    echo "ðŸ“‚ Projects:"
    for f in "$PROJECTS_DIR"/*.json; do
        [[ -f "$f" ]] || continue
        local base=$(basename "$f" .json)
        local json
        json=$(json_read "$f")
        echo "  - $base"
        # List submodules
        local modules
        modules=$(echo "$json" | grep -oP '"modules": \[\K[^\]]*' | tr -d '"')
        for mod in $modules; do
            echo "      * $mod"
        done
    done
}

tags_add() {
    local key="$1"
    local tag="$2"

    local file="$PROJECTS_DIR/$key.json"
    if [[ ! -f "$file" ]]; then
        echo "Project or submodule '$key' does not exist"
        exit 1
    fi

    local json
    json=$(json_read "$file")
    # Check if tag exists
    if echo "$json" | grep -q "\"$tag\""; then
        echo "âœ… Tag '$tag' already present for '$key'."
        return
    fi

    local new_json
    new_json=$(echo "$json" | sed -E "s/(\"tags\": \[)/\1\"$tag\", /")
    json_write "$file" "$new_json"
    echo "âœ… Tag '$tag' added to '$key'."
}

tags_list() {
    local key="$1"
    local file="$PROJECTS_DIR/$key.json"
    if [[ ! -f "$file" ]]; then
        echo "Project or submodule '$key' does not exist"
        exit 1
    fi

    local json
    json=$(json_read "$file")
    local tags
    tags=$(echo "$json" | grep -oP '"tags": \[\K[^\]]*' | tr -d '"')
    for t in $tags; do
        echo "$t"
    done
}

tags_by() {
    local tag="$1"
    echo "Projects/submodules with tag '$tag':"
    for f in "$PROJECTS_DIR"/*.json; do
        [[ -f "$f" ]] || continue
        local base=$(basename "$f" .json)
        local json
        json=$(json_read "$f")
        if echo "$json" | grep -q "\"$tag\""; then
            echo "  - $base"
        fi
        # Check modules
        local modules
        modules=$(echo "$json" | grep -oP '"modules": \[\K[^\]]*' | tr -d '"')
        for mod in $modules; do
            local mod_file="$PROJECTS_DIR/$base.json"  # module tags are stored in parent JSON
            if echo "$json" | grep -q "\"$tag\""; then
                echo "      * $mod@$base"
            fi
        done
    done
}

# -----------------------
# Main argument parsing
# -----------------------

main() {
    if [[ $# -lt 1 ]]; then
        show_help
        exit 0
    fi

    case "$1" in
        project)
            case "$2" in
                create) project_create "$3" "$4" ;;
                list) project_list ;;
                tags)
                    case "$3" in
                        add) tags_add "$4" "$5" ;;
                        list) tags_list "$4" ;;
                        by) tags_by "$4" ;;
                        *) show_help ;;
                    esac
                    ;;
                *) show_help ;;
            esac
            ;;
        submodule)
            case "$2" in
                create) submodule_create "$3" "$4" ;;
                *) show_help ;;
            esac
            ;;
        help) show_help ;;
        version) echo "YATT version 0.1" ;;
        *) echo "Unknown command. Use '$0 help'"; exit 1 ;;
    esac
}

main "$@"
